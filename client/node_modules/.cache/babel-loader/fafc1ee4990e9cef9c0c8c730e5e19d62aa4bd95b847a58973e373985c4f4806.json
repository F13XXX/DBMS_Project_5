{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/Uni/Semester_3/DBMS/01_Final_Project/client/src/components/TaskCompletion.js\";\nimport React from 'react';\nimport { Box, Typography, CircularProgress, Grid } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCompletion = ({\n  taskCompletions\n}) => {\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h2\",\n        gutterBottom: true,\n        children: \"Assignment Completion by Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"No assignment data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Group tasks by area and calculate progress\n  const areaGroups = taskCompletions.reduce((acc, task) => {\n    if (!acc[task.area_name]) {\n      acc[task.area_name] = {\n        name: task.area_name,\n        completed: 0,\n        total: 0\n      };\n    }\n    acc[task.area_name].total += 1;\n    if (task.is_correct) {\n      acc[task.area_name].completed += 1;\n    }\n    return acc;\n  }, {});\n  const areas = Object.values(areaGroups);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"h2\",\n      gutterBottom: true,\n      children: \"Assignment Completion by Area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: areas.map(area => {\n        const progress = area.completed / area.total * 100;\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            sx: {\n              p: 3,\n              border: '1px solid #ddd',\n              borderRadius: '8px',\n              backgroundColor: '#e3f2fd',\n              boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n              height: '200px'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              position: \"relative\",\n              display: \"inline-flex\",\n              children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n                variant: \"determinate\",\n                value: progress,\n                size: 100,\n                thickness: 5,\n                sx: {\n                  color: '#2196f3'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -50%)\",\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h6\",\n                  sx: {\n                    color: '#1565c0'\n                  },\n                  children: [area.completed, \" / \", area.total]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              sx: {\n                color: '#1565c0',\n                textAlign: 'center',\n                mt: 2\n              },\n              children: area.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)\n        }, area.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_c = TaskCompletion;\nexport default TaskCompletion;\nvar _c;\n$RefreshReg$(_c, \"TaskCompletion\");","map":{"version":3,"names":["React","Box","Typography","CircularProgress","Grid","jsxDEV","_jsxDEV","TaskCompletion","taskCompletions","length","children","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","areaGroups","reduce","acc","task","area_name","name","completed","total","is_correct","areas","Object","values","container","spacing","map","area","progress","item","xs","sm","md","display","flexDirection","alignItems","justifyContent","sx","p","border","borderRadius","backgroundColor","boxShadow","height","position","value","size","thickness","color","top","left","transform","textAlign","mt","_c","$RefreshReg$"],"sources":["/home/david/Documents/Uni/Semester_3/DBMS/01_Final_Project/client/src/components/TaskCompletion.js"],"sourcesContent":["import React from 'react';\nimport { Box, Typography, CircularProgress, Grid } from '@mui/material';\n\nconst TaskCompletion = ({ taskCompletions }) => {\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return (\n      <Box>\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n          Assignment Completion by Area\n        </Typography>\n        <Typography variant=\"body1\">No assignment data available.</Typography>\n      </Box>\n    );\n  }\n\n  // Group tasks by area and calculate progress\n  const areaGroups = taskCompletions.reduce((acc, task) => {\n    if (!acc[task.area_name]) {\n      acc[task.area_name] = { name: task.area_name, completed: 0, total: 0 };\n    }\n    acc[task.area_name].total += 1;\n    if (task.is_correct) {\n      acc[task.area_name].completed += 1;\n    }\n    return acc;\n  }, {});\n\n  const areas = Object.values(areaGroups);\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n        Assignment Completion by Area\n      </Typography>\n      <Grid container spacing={3}>\n        {areas.map((area) => {\n          const progress = (area.completed / area.total) * 100;\n\n          return (\n            <Grid item xs={12} sm={6} md={4} key={area.name}>\n              <Box\n                display=\"flex\"\n                flexDirection=\"column\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n                sx={{\n                  p: 3,\n                  border: '1px solid #ddd',\n                  borderRadius: '8px',\n                  backgroundColor: '#e3f2fd',\n                  boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n                  height: '200px',\n                }}\n              >\n                <Box position=\"relative\" display=\"inline-flex\">\n                  <CircularProgress\n                    variant=\"determinate\"\n                    value={progress}\n                    size={100}\n                    thickness={5}\n                    sx={{ color: '#2196f3' }}\n                  />\n                  <Box\n                    position=\"absolute\"\n                    top=\"50%\"\n                    left=\"50%\"\n                    transform=\"translate(-50%, -50%)\"\n                  >\n                    <Typography variant=\"h6\" sx={{ color: '#1565c0' }}>\n                      {area.completed} / {area.total}\n                    </Typography>\n                  </Box>\n                </Box>\n                <Typography variant=\"h6\" sx={{ color: '#1565c0', textAlign: 'center', mt: 2 }}>\n                  {area.name}\n                </Typography>\n              </Box>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TaskCompletion;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}