{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCompletion = ({\n  taskCompletions\n}) => {\n  _s();\n  const [expandedAreas, setExpandedAreas] = useState({});\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        component: \"h2\",\n        gutterBottom: true,\n        children: \"Assignment Completion by Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"No assignment data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    }\n    areaMap[areaName].total += 1;\n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    }\n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n    console.log(difficulty);\n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n\n  // Convert to array and sort by area_id\n  let areas = Object.values(areaMap);\n  areas.sort((a, b) => a.area_id - b.area_id);\n  const toggleAreaExpansion = areaName => {\n    setExpandedAreas(prev => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = minutes => {\n    if (!minutes) return \"-\";\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n\n  // Handle sorting\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    setSortConfig({\n      key,\n      direction,\n      areaName\n    });\n  };\n\n  // Get sorted tasks for an area\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || sortConfig.areaName !== areaName) {\n      return tasks;\n    }\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n\n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n      }\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      component: \"h2\",\n      gutterBottom: true,\n      children: \"Assignment Completion by Area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      direction: \"column\",\n      children: areas.map(area => {\n        const progress = area.total > 0 ? area.completed / area.total * 100 : 0;\n        const sortedTasks = getSortedTasks(area.tasks, area.name);\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              border: '1px solid #ddd',\n              borderRadius: '8px',\n              backgroundColor: '#e3f2fd',\n              boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n              overflow: 'hidden'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 3,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'flex-start',\n                justifyContent: 'center',\n                position: 'relative'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                sx: {\n                  color: '#1565c0',\n                  mb: 1\n                },\n                children: area.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: progress,\n                sx: {\n                  width: '100%',\n                  height: '10px',\n                  borderRadius: '5px',\n                  backgroundColor: '#bbdefb',\n                  '& .MuiLinearProgress-bar': {\n                    backgroundColor: '#2196f3'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                sx: {\n                  color: '#1565c0',\n                  mt: 1\n                },\n                children: [area.completed, \" / \", area.total, \" tasks completed\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                size: \"small\",\n                sx: {\n                  position: 'absolute',\n                  top: 8,\n                  right: 8\n                },\n                onClick: () => toggleAreaExpansion(area.name),\n                children: expandedAreas[area.name] ? /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 75\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n              in: expandedAreas[area.name],\n              children: /*#__PURE__*/_jsxDEV(TableContainer, {\n                component: Paper,\n                children: /*#__PURE__*/_jsxDEV(Table, {\n                  size: \"small\",\n                  children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                    children: /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'id' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'id' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('id', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 215,\n                            columnNumber: 31\n                          }, this), \"Task ID\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 210,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 209,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"left\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: [\" \", /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'name' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'name' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('name', area.name),\n                          children: \"Task\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 220,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 219,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'isCompleted' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'isCompleted' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('isCompleted', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 234,\n                            columnNumber: 32\n                          }, this), \"Status\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 229,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 228,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'difficulty' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'difficulty' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('difficulty', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 244,\n                            columnNumber: 32\n                          }, this), \"Difficulty\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 239,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 238,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'time_spent' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'time_spent' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('time_spent', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 254,\n                            columnNumber: 32\n                          }, this), \"Time Spent\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 249,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 248,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 208,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 207,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                    children: sortedTasks.map(task => /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.id\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 263,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"left\",\n                        children: task.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 264,\n                        columnNumber: 29\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.isCompleted ? /*#__PURE__*/_jsxDEV(CheckIcon, {\n                          sx: {\n                            color: 'green'\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 267,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(CloseIcon, {\n                          sx: {\n                            color: 'red'\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 269,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 265,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.isCompleted ? task.difficulty || 'N/A' : '-'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 272,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: formatTimeSpent(task.time_spent)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 273,\n                        columnNumber: 29\n                      }, this)]\n                    }, task.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 27\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 260,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)\n        }, area.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCompletion, \"RleY0ZpeH4ZMNj6rmpfGLKBqCDY=\");\n_c = TaskCompletion;\nexport default TaskCompletion;\nvar _c;\n$RefreshReg$(_c, \"TaskCompletion\");","map":{"version":3,"names":["React","useState","Box","Typography","LinearProgress","Grid","Collapse","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","IconButton","TableSortLabel","KeyboardArrowDownIcon","KeyboardArrowUpIcon","CheckIcon","CloseIcon","jsxDEV","_jsxDEV","TaskCompletion","taskCompletions","_s","expandedAreas","setExpandedAreas","sortConfig","setSortConfig","key","direction","areaName","length","children","variant","component","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","areaMap","forEach","task","area_name","name","area_id","parseInt","completed","total","tasks","query_text","partial_solution","difficulty","difficulty_level","undefined","console","log","push","id","statement_id","statement_text","isCompleted","Boolean","time_spent","processing_time","areas","Object","values","sort","a","b","toggleAreaExpansion","prev","formatTimeSpent","minutes","hours","Math","floor","remainingMinutes","difficultyMapping","requestSort","getSortedTasks","aValue","bValue","container","spacing","map","area","progress","sortedTasks","item","xs","sx","border","borderRadius","backgroundColor","boxShadow","overflow","p","display","flexDirection","alignItems","justifyContent","position","color","mb","value","width","height","mt","size","top","right","onClick","in","align","fontWeight","active","style","marginRight","_c","$RefreshReg$"],"sources":["/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell,\n  TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel\n} from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst TaskCompletion = ({ taskCompletions }) => {\n  const [expandedAreas, setExpandedAreas] = useState({});\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return (\n      <Box>\n        <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n          Assignment Completion by Area\n        </Typography>\n        <Typography variant=\"body1\">No assignment data available.</Typography>\n      </Box>\n    );\n  }\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n  \n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    }\n    \n    areaMap[areaName].total += 1;\n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    }\n    \n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n\n    console.log(difficulty);\n    \n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n  \n  // Convert to array and sort by area_id\n  let areas = Object.values(areaMap);\n  areas.sort((a, b) => a.area_id - b.area_id);\n\n  const toggleAreaExpansion = (areaName) => {\n    setExpandedAreas((prev) => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = (minutes) => {\n    if (!minutes) return \"-\";\n    \n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    \n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    \n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n\n\n  // Handle sorting\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    \n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    \n    setSortConfig({ key, direction, areaName });\n  };\n\n  // Get sorted tasks for an area\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || sortConfig.areaName !== areaName) {\n      return tasks;\n    }\n\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n      \n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n    }\n      \n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" component=\"h2\" gutterBottom>\n        Assignment Completion by Area\n      </Typography>\n      <Grid container spacing={3} direction=\"column\">\n        {areas.map((area) => {\n          const progress = area.total > 0 ? (area.completed / area.total) * 100 : 0;\n          const sortedTasks = getSortedTasks(area.tasks, area.name);\n\n          return (\n            <Grid item xs={12} key={area.name}>\n              <Box\n                sx={{\n                  border: '1px solid #ddd',\n                  borderRadius: '8px',\n                  backgroundColor: '#e3f2fd',\n                  boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n                  overflow: 'hidden',\n                }}\n              >\n                {/* Main area display */}\n                <Box\n                  sx={{\n                    p: 3,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-start',\n                    justifyContent: 'center',\n                    position: 'relative',\n                  }}\n                >\n                  <Typography variant=\"h6\" sx={{color: '#1565c0', mb: 1}} >\n                    {area.name}\n                  </Typography>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={progress}\n                    sx={{\n                      width: '100%',\n                      height: '10px',\n                      borderRadius: '5px',\n                      backgroundColor: '#bbdefb',\n                      '& .MuiLinearProgress-bar': {\n                        backgroundColor: '#2196f3',\n                      },\n                    }}\n                  />\n                  <Typography variant=\"body1\" sx={{ color: '#1565c0', mt: 1 }}>\n                    {area.completed} / {area.total} tasks completed\n                  </Typography>\n                  {/* Dropdown button */}\n                  <IconButton \n                    size=\"small\" \n                    sx={{ position: 'absolute', top: 8, right: 8 }}\n                    onClick={() => toggleAreaExpansion(area.name)}\n                  >\n                    {expandedAreas[area.name] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                  </IconButton>\n                </Box>\n\n                {/* Dropdown content */}\n                <Collapse in={expandedAreas[area.name]}>\n                  <TableContainer component={Paper}>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'id' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'id' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('id', area.name)}\n                            >\n                              <span style={{ marginRight: '24px' }}></span>\n                              Task ID\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"left\" sx={{ fontWeight: 'bold' }}> {/* Left-align Task column */}\n                            <TableSortLabel\n                              active={sortConfig.key === 'name' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'name' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('name', area.name)}\n                            >\n                              Task\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'isCompleted' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'isCompleted' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('isCompleted', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Status\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'difficulty' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'difficulty' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('difficulty', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Difficulty\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'time_spent' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'time_spent' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('time_spent', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Time Spent\n                            </TableSortLabel>\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {sortedTasks.map((task) => (\n                          <TableRow key={task.id}>\n                            <TableCell align=\"center\">{task.id}</TableCell>\n                            <TableCell align=\"left\">{task.name}</TableCell> {/* Left-align Task column */}\n                            <TableCell align=\"center\">\n                              {task.isCompleted ? (\n                                <CheckIcon sx={{ color: 'green' }} />\n                              ) : (\n                                <CloseIcon sx={{ color: 'red' }} />\n                              )}\n                            </TableCell>\n                            <TableCell align=\"center\">{task.isCompleted ? (task.difficulty || 'N/A') : '-'}</TableCell>\n                            <TableCell align=\"center\">{formatTimeSpent(task.time_spent)}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Collapse>\n              </Box>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TaskCompletion;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}