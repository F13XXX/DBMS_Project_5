{"ast":null,"code":"useEffect(() => {\n  const loadData = async () => {\n    try {\n      setLoading(true);\n\n      // Modified Promise.all with third fetch\n      const [userResponse, taskCompletionsResponse, taskAnalyticsResponse] = await Promise.all([fetch(`${API_BASE_URL}/users/${username}`), fetch(`${API_BASE_URL}/users/${username}/task-completions`), fetch(`${API_BASE_URL}/task-analytics`) // Added analytics fetch\n      ]);\n\n      // Added analytics response check\n      if (!userResponse.ok) throw new Error('Failed to fetch user data');\n      if (!taskCompletionsResponse.ok) throw new Error('Failed to fetch task completions');\n      if (!taskAnalyticsResponse.ok) throw new Error('Failed to fetch task analytics'); // New check\n\n      const userData = await userResponse.json();\n      const taskCompletions = await taskCompletionsResponse.json();\n      const taskAnalytics = await taskAnalyticsResponse.json(); // Parse analytics\n\n      setUserData(userData);\n      setTaskCompletions(taskCompletions);\n      setTaskAnalytics(taskAnalytics); // New state update\n      setError(null);\n    } catch (err) {\n      console.error('Error loading data:', err);\n      setError('Failed to load user performance data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  loadData();\n}, [username]);","map":{"version":3,"names":["useEffect","loadData","setLoading","userResponse","taskCompletionsResponse","taskAnalyticsResponse","Promise","all","fetch","API_BASE_URL","username","ok","Error","userData","json","taskCompletions","taskAnalytics","setUserData","setTaskCompletions","setTaskAnalytics","setError","err","console","error"],"sources":["/home/david/Documents/Uni/Semester_3/DBMS/01_Final_Project/client/src/components/UserPerformanceComponent.js"],"sourcesContent":["useEffect(() => {\n  const loadData = async () => {\n    try {\n      setLoading(true);\n\n      // Modified Promise.all with third fetch\n      const [userResponse, taskCompletionsResponse, taskAnalyticsResponse] = await Promise.all([\n        fetch(`${API_BASE_URL}/users/${username}`),\n        fetch(`${API_BASE_URL}/users/${username}/task-completions`),\n        fetch(`${API_BASE_URL}/task-analytics`) // Added analytics fetch\n      ]);\n\n      // Added analytics response check\n      if (!userResponse.ok) throw new Error('Failed to fetch user data');\n      if (!taskCompletionsResponse.ok) throw new Error('Failed to fetch task completions');\n      if (!taskAnalyticsResponse.ok) throw new Error('Failed to fetch task analytics'); // New check\n\n      const userData = await userResponse.json();\n      const taskCompletions = await taskCompletionsResponse.json();\n      const taskAnalytics = await taskAnalyticsResponse.json(); // Parse analytics\n\n      setUserData(userData);\n      setTaskCompletions(taskCompletions);\n      setTaskAnalytics(taskAnalytics); // New state update\n      setError(null);\n    } catch (err) {\n      console.error('Error loading data:', err);\n      setError('Failed to load user performance data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  loadData();\n}, [username]);\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACFC,UAAU,CAAC,IAAI,CAAC;;MAEhB;MACA,MAAM,CAACC,YAAY,EAAEC,uBAAuB,EAAEC,qBAAqB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvFC,KAAK,CAAC,GAAGC,YAAY,UAAUC,QAAQ,EAAE,CAAC,EAC1CF,KAAK,CAAC,GAAGC,YAAY,UAAUC,QAAQ,mBAAmB,CAAC,EAC3DF,KAAK,CAAC,GAAGC,YAAY,iBAAiB,CAAC,CAAC;MAAA,CACzC,CAAC;;MAEF;MACA,IAAI,CAACN,YAAY,CAACQ,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAClE,IAAI,CAACR,uBAAuB,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;MACpF,IAAI,CAACP,qBAAqB,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;;MAElF,MAAMC,QAAQ,GAAG,MAAMV,YAAY,CAACW,IAAI,CAAC,CAAC;MAC1C,MAAMC,eAAe,GAAG,MAAMX,uBAAuB,CAACU,IAAI,CAAC,CAAC;MAC5D,MAAME,aAAa,GAAG,MAAMX,qBAAqB,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;;MAE1DG,WAAW,CAACJ,QAAQ,CAAC;MACrBK,kBAAkB,CAACH,eAAe,CAAC;MACnCI,gBAAgB,CAACH,aAAa,CAAC,CAAC,CAAC;MACjCI,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzCD,QAAQ,CAAC,sCAAsC,CAAC;IAClD,CAAC,SAAS;MACRlB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EACDD,QAAQ,CAAC,CAAC;AACZ,CAAC,EAAE,CAACS,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}