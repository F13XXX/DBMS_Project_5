{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCompletion = ({\n  taskCompletions\n}) => {\n  _s();\n  const [expandedAreas, setExpandedAreas] = useState({});\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"No assignment data available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    }\n    areaMap[areaName].total += 1;\n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    }\n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n\n  // Convert to array and sort by area_id\n  let areas = Object.values(areaMap);\n  areas.sort((a, b) => a.area_id - b.area_id);\n  const toggleAreaExpansion = areaName => {\n    setExpandedAreas(prev => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = minutes => {\n    if (!minutes) return \"-\";\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n\n  // Handle sorting\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    setSortConfig({\n      key,\n      direction,\n      areaName\n    });\n  };\n\n  // Get sorted tasks for an area or all tasks\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || areaName && sortConfig.areaName !== areaName) {\n      return tasks;\n    }\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n\n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n      }\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n\n  // Extract all tasks across all areas\n  const allTasks = areas.flatMap(area => area.tasks);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      direction: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            border: '1px solid #ddd',\n            borderRadius: '8px',\n            backgroundColor: '#f3e5f5',\n            boxShadow: '0px 4px 6px rgba(0,0,0,0.1)',\n            overflow: 'hidden'\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              p: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              sx: {\n                color: '#6a1b9a',\n                mb: 2\n              },\n              children: \"All Tasks Across All Assignments\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n              component: Paper,\n              children: /*#__PURE__*/_jsxDEV(Table, {\n                size: \"small\",\n                children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                  children: /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      sx: {\n                        fontWeight: 'bold'\n                      },\n                      children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                        active: sortConfig.key === 'id',\n                        direction: sortConfig.key === 'id' ? sortConfig.direction : 'asc',\n                        onClick: () => requestSort('id', null),\n                        children: \"Task ID\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 154,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 153,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"left\",\n                      sx: {\n                        fontWeight: 'bold'\n                      },\n                      children: \"Task Name\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      sx: {\n                        fontWeight: 'bold'\n                      },\n                      children: \"Status\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      sx: {\n                        fontWeight: 'bold'\n                      },\n                      children: \"Difficulty\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      sx: {\n                        fontWeight: 'bold'\n                      },\n                      children: \"Time Spent\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 171,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 152,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 151,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                  children: getSortedTasks(allTasks).map(task => /*#__PURE__*/_jsxDEV(TableRow, {\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      children: task.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 179,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"left\",\n                      children: task.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 180,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      children: task.isCompleted ? /*#__PURE__*/_jsxDEV(CheckIcon, {\n                        sx: {\n                          color: 'green'\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 183,\n                        columnNumber: 29\n                      }, this) : /*#__PURE__*/_jsxDEV(CloseIcon, {\n                        sx: {\n                          color: 'red'\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 185,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 181,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      children: task.difficulty || '-'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      align: \"center\",\n                      children: formatTimeSpent(task.time_spent)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 25\n                    }, this)]\n                  }, task.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 23\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 176,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), areas.map(area => {\n        const progress = area.total > 0 ? area.completed / area.total * 100 : 0;\n        const sortedTasks = getSortedTasks(area.tasks, area.name);\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12\n        }, area.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCompletion, \"RleY0ZpeH4ZMNj6rmpfGLKBqCDY=\");\n_c = TaskCompletion;\nexport default TaskCompletion;\nvar _c;\n$RefreshReg$(_c, \"TaskCompletion\");","map":{"version":3,"names":["React","useState","Box","Typography","LinearProgress","Grid","Collapse","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","IconButton","TableSortLabel","KeyboardArrowDownIcon","KeyboardArrowUpIcon","CheckIcon","CloseIcon","jsxDEV","_jsxDEV","TaskCompletion","taskCompletions","_s","expandedAreas","setExpandedAreas","sortConfig","setSortConfig","key","direction","areaName","length","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","areaMap","forEach","task","area_name","name","area_id","parseInt","completed","total","tasks","query_text","partial_solution","difficulty","difficulty_level","undefined","push","id","statement_id","statement_text","isCompleted","Boolean","time_spent","processing_time","areas","Object","values","sort","a","b","toggleAreaExpansion","prev","formatTimeSpent","minutes","hours","Math","floor","remainingMinutes","difficultyMapping","requestSort","getSortedTasks","aValue","bValue","allTasks","flatMap","area","container","spacing","item","xs","sx","border","borderRadius","backgroundColor","boxShadow","overflow","p","color","mb","component","size","align","fontWeight","active","onClick","map","progress","sortedTasks","_c","$RefreshReg$"],"sources":["/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell,\n  TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel\n} from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst TaskCompletion = ({ taskCompletions }) => {\n  const [expandedAreas, setExpandedAreas] = useState({});\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n\n  if (!taskCompletions || taskCompletions.length === 0) {\n    return (\n      <Box>\n        <Typography variant=\"body1\">No assignment data available.</Typography>\n      </Box>\n    );\n  }\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n  \n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    }\n    \n    areaMap[areaName].total += 1;\n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    }\n    \n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n\n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n  \n  // Convert to array and sort by area_id\n  let areas = Object.values(areaMap);\n  areas.sort((a, b) => a.area_id - b.area_id);\n\n  const toggleAreaExpansion = (areaName) => {\n    setExpandedAreas((prev) => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = (minutes) => {\n    if (!minutes) return \"-\";\n    \n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    \n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    \n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n\n  // Handle sorting\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    \n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    \n    setSortConfig({ key, direction, areaName });\n  };\n\n  // Get sorted tasks for an area or all tasks\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || (areaName && sortConfig.areaName !== areaName)) {\n      return tasks;\n    }\n\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n      \n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n      }\n      \n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n\n  // Extract all tasks across all areas\n  const allTasks = areas.flatMap((area) => area.tasks);\n  \n  return (\n    <Box>\n      <Grid container spacing={3} direction=\"column\">\n        {/* Section for All Tasks */}\n        <Grid item xs={12}>\n          <Box sx={{ border: '1px solid #ddd', borderRadius: '8px', backgroundColor: '#f3e5f5', boxShadow: '0px 4px 6px rgba(0,0,0,0.1)', overflow: 'hidden' }}>\n            <Box sx={{ p: 3 }}>\n              <Typography variant=\"h5\" sx={{ color: '#6a1b9a', mb: 2 }}>\n                All Tasks Across All Assignments\n              </Typography>\n              <TableContainer component={Paper}>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                        <TableSortLabel\n                          active={sortConfig.key === 'id'}\n                          direction={sortConfig.key === 'id' ? sortConfig.direction : 'asc'}\n                          onClick={() => requestSort('id', null)}\n                        >\n                          Task ID\n                        </TableSortLabel>\n                      </TableCell>\n                      <TableCell align=\"left\" sx={{ fontWeight: 'bold' }}>\n                        Task Name\n                      </TableCell>\n                      <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                        Status\n                      </TableCell>\n                      <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                        Difficulty\n                      </TableCell>\n                      <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                        Time Spent\n                      </TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {getSortedTasks(allTasks).map((task) => (\n                      <TableRow key={task.id}>\n                        <TableCell align=\"center\">{task.id}</TableCell>\n                        <TableCell align=\"left\">{task.name}</TableCell>\n                        <TableCell align=\"center\">\n                          {task.isCompleted ? (\n                            <CheckIcon sx={{ color: 'green' }} />\n                          ) : (\n                            <CloseIcon sx={{ color: 'red' }} />\n                          )}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.difficulty || '-'}</TableCell>\n                        <TableCell align=\"center\">{formatTimeSpent(task.time_spent)}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Box>\n          </Box>\n        </Grid>\n\n        {/* Sections for Individual Areas */}\n        {areas.map((area) => {\n          const progress = area.total > 0 ? (area.completed / area.total) * 100 : 0;\n          const sortedTasks = getSortedTasks(area.tasks, area.name);\n\n          return (\n            <Grid item xs={12} key={area.name}>\n              {/* Area-specific content */}\n              {/* Existing code for individual areas */}\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TaskCompletion;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}