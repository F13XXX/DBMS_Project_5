{"ast":null,"code":"var _jsxFileName = \"/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel } from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCompletion = ({\n  taskCompletions\n}) => {\n  _s();\n  const [expandedAreas, setExpandedAreas] = useState({}); // State that tracks which areas are expanded\n  const [sortConfig, setSortConfig] = useState({\n    // state to manage sorting\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n\n    // Init area data if does not exist\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    }\n    ;\n    areaMap[areaName].total += 1; // Total task-count\n\n    // Task counts as completed, if solution or partial solution has been submitted \n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    }\n    ;\n\n    // Get difficulty if available\n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n\n    // Add task to arear's array of tasks\n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n\n  // Special All Tasks area that aggregates all tasks across areas\n  const allTasksArea = {\n    name: 'All Tasks',\n    area_id: 0,\n    // All tasks is first to be rendered. Do not zero-index existing area_id s\n    completed: Object.values(areaMap).reduce((sum, area) => sum + area.completed, 0),\n    total: Object.values(areaMap).reduce((sum, area) => sum + area.total, 0),\n    tasks: Object.values(areaMap).flatMap(area => area.tasks)\n  };\n  let areas = Object.values(areaMap); // Convert to array and sort by area_id\n  areas.push(allTasksArea); // Add to existing areas\n\n  areas.sort((a, b) => a.area_id - b.area_id); // sort by area_id\n\n  const toggleAreaExpansion = areaName => {\n    setExpandedAreas(prev => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = minutes => {\n    if (!minutes) return \"-\";\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    setSortConfig({\n      key,\n      direction,\n      areaName\n    });\n  };\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || sortConfig.areaName !== areaName) {\n      return tasks;\n    }\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n\n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n      }\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n  const allTasks = areas.flatMap(area => area.tasks);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      direction: \"column\",\n      children: areas.map(area => {\n        const progress = area.total > 0 ? area.completed / area.total * 100 : 0;\n        const sortedTasks = getSortedTasks(area.tasks, area.name);\n        return /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              border: '1px solid #ddd',\n              borderRadius: '8px',\n              backgroundColor: area.name === 'All Tasks' ? '#F0E3FD' : '#E3F2FD',\n              boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n              overflow: 'hidden'\n            },\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                p: 3,\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'flex-start',\n                justifyContent: 'center',\n                position: 'relative'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                sx: {\n                  color: area.name === 'All Tasks' ? '#6A15C0' : '#1565C0',\n                  mb: 1\n                },\n                children: area.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n                variant: \"determinate\",\n                value: progress,\n                sx: {\n                  width: '100%',\n                  height: '10px',\n                  borderRadius: '5px',\n                  backgroundColor: area.name === 'All Tasks' ? '#DABBFB' : '#BBDEFB',\n                  '& .MuiLinearProgress-bar': {\n                    backgroundColor: area.name === 'All Tasks' ? '#8921F2' : '#2196F3'\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                sx: {\n                  color: area.name === 'All Tasks' ? '#6A15C0' : '#1565C0',\n                  mt: 1\n                },\n                children: [area.completed, \" / \", area.total, \" tasks completed\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                size: \"small\",\n                sx: {\n                  position: 'absolute',\n                  top: 8,\n                  right: 8\n                },\n                onClick: () => toggleAreaExpansion(area.name),\n                children: expandedAreas[area.name] ? /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 75\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n              in: expandedAreas[area.name],\n              children: /*#__PURE__*/_jsxDEV(TableContainer, {\n                component: Paper,\n                children: /*#__PURE__*/_jsxDEV(Table, {\n                  size: \"small\",\n                  children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                    children: /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'id' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'id' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('id', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 226,\n                            columnNumber: 31\n                          }, this), \"Task ID\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 221,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 220,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"left\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: [\" \", /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'name' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'name' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('name', area.name),\n                          children: \"Task\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 231,\n                          columnNumber: 29\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 230,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'isCompleted' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'isCompleted' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('isCompleted', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 245,\n                            columnNumber: 32\n                          }, this), \"Status\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 240,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 239,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'difficulty' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'difficulty' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('difficulty', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 255,\n                            columnNumber: 32\n                          }, this), \"Difficulty\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 250,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 249,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        sx: {\n                          fontWeight: 'bold'\n                        },\n                        children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                          active: sortConfig.key === 'time_spent' && sortConfig.areaName === area.name,\n                          direction: sortConfig.key === 'time_spent' ? sortConfig.direction : 'asc',\n                          onClick: () => requestSort('time_spent', area.name),\n                          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                            style: {\n                              marginRight: '24px'\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 265,\n                            columnNumber: 32\n                          }, this), \"Time Spent\"]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 260,\n                          columnNumber: 29\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 259,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 219,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 218,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                    children: sortedTasks.map(task => /*#__PURE__*/_jsxDEV(TableRow, {\n                      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.id\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 274,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"left\",\n                        children: task.name\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 275,\n                        columnNumber: 29\n                      }, this), \" \", /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.isCompleted ? /*#__PURE__*/_jsxDEV(CheckIcon, {\n                          sx: {\n                            color: 'green'\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 278,\n                          columnNumber: 33\n                        }, this) : /*#__PURE__*/_jsxDEV(CloseIcon, {\n                          sx: {\n                            color: 'red'\n                          }\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 280,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 276,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: task.isCompleted ? task.difficulty || 'N/A' : '-'\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 283,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                        align: \"center\",\n                        children: formatTimeSpent(task.time_spent)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 284,\n                        columnNumber: 29\n                      }, this)]\n                    }, task.id, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 27\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 271,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 217,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, area.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCompletion, \"ZfXXcW0hkofpUfnoSCHETY0jAx8=\");\n_c = TaskCompletion;\nexport default TaskCompletion;\nvar _c;\n$RefreshReg$(_c, \"TaskCompletion\");","map":{"version":3,"names":["React","useState","Box","Typography","LinearProgress","Grid","Collapse","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","IconButton","TableSortLabel","KeyboardArrowDownIcon","KeyboardArrowUpIcon","CheckIcon","CloseIcon","jsxDEV","_jsxDEV","TaskCompletion","taskCompletions","_s","expandedAreas","setExpandedAreas","sortConfig","setSortConfig","key","direction","areaName","areaMap","forEach","task","area_name","name","area_id","parseInt","completed","total","tasks","query_text","partial_solution","difficulty","difficulty_level","undefined","push","id","statement_id","statement_text","isCompleted","Boolean","time_spent","processing_time","allTasksArea","Object","values","reduce","sum","area","flatMap","areas","sort","a","b","toggleAreaExpansion","prev","formatTimeSpent","minutes","hours","Math","floor","remainingMinutes","difficultyMapping","requestSort","getSortedTasks","aValue","bValue","allTasks","children","container","spacing","map","progress","sortedTasks","item","xs","sx","border","borderRadius","backgroundColor","boxShadow","overflow","p","display","flexDirection","alignItems","justifyContent","position","variant","color","mb","fileName","_jsxFileName","lineNumber","columnNumber","value","width","height","mt","size","top","right","onClick","in","component","align","fontWeight","active","style","marginRight","_c","$RefreshReg$"],"sources":["/home/david/Documents/Uni/Semester_3/DBMS/0_Final_Project/client/src/components/TaskCompletion.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box, Typography, LinearProgress, Grid, Collapse, Table, TableBody, TableCell,\n  TableContainer, TableHead, TableRow, Paper, IconButton, TableSortLabel\n} from '@mui/material';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport CheckIcon from '@mui/icons-material/Check';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst TaskCompletion = ({ taskCompletions }) => {\n  const [expandedAreas, setExpandedAreas] = useState({}); // State that tracks which areas are expanded\n  const [sortConfig, setSortConfig] = useState({ // state to manage sorting\n    key: null,\n    direction: 'asc',\n    areaName: null\n  });\n\n  // Group tasks by area and collect area_ids\n  const areaMap = {};\n\n  taskCompletions.forEach(task => {\n    const areaName = task.area_name;\n\n    // Init area data if does not exist\n    if (!areaMap[areaName]) {\n      areaMap[areaName] = {\n        name: areaName,\n        area_id: parseInt(task.area_id),\n        completed: 0,\n        total: 0,\n        tasks: []\n      };\n    };\n\n    areaMap[areaName].total += 1; // Total task-count\n\n    // Task counts as completed, if solution or partial solution has been submitted \n    if (task.query_text || task.partial_solution) {\n      areaMap[areaName].completed += 1;\n    };\n    \n    // Get difficulty if available\n    let difficulty = null;\n    if (task.difficulty_level !== undefined) difficulty = task.difficulty_level;\n    \n\n    // Add task to arear's array of tasks\n    areaMap[areaName].tasks.push({\n      id: task.statement_id,\n      name: task.statement_text,\n      isCompleted: Boolean(task.query_text) || Boolean(task.partial_solution),\n      difficulty: difficulty,\n      time_spent: task.processing_time\n    });\n  });\n  \n  // Special All Tasks area that aggregates all tasks across areas\n  const allTasksArea = {\n    name: 'All Tasks',\n    area_id: 0, // All tasks is first to be rendered. Do not zero-index existing area_id s\n    completed: Object.values(areaMap).reduce((sum, area) => sum + area.completed, 0),\n    total: Object.values(areaMap).reduce((sum, area) => sum + area.total, 0),\n    tasks: Object.values(areaMap).flatMap(area => area.tasks)\n  };\n\n  let areas = Object.values(areaMap); // Convert to array and sort by area_id\n  areas.push(allTasksArea); // Add to existing areas\n\n  areas.sort((a, b) => a.area_id - b.area_id); // sort by area_id\n\n  const toggleAreaExpansion = (areaName) => {\n    setExpandedAreas((prev) => ({\n      ...prev,\n      [areaName]: !prev[areaName]\n    }));\n  };\n\n  // Format time spent in minutes to a readable format\n  const formatTimeSpent = (minutes) => {\n    if (!minutes) return \"-\";\n    \n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    \n    if (hours === 0) {\n      return `${remainingMinutes}m`;\n    }\n    \n    return `${hours}h ${remainingMinutes}m`;\n  };\n\n  // Use ordinal values instead of strings for sorting\n  const difficultyMapping = {\n    'Very Easy': 1,\n    'Easy': 2,\n    'Normal': 3,\n    'Difficult': 4,\n    'Very Difficult': 5\n  };\n\n\n  const requestSort = (key, areaName) => {\n    let direction = 'asc';\n    \n    if (sortConfig.key === key && sortConfig.direction === 'asc' && sortConfig.areaName === areaName) {\n      direction = 'desc';\n    }\n    \n    setSortConfig({ key, direction, areaName });\n  };\n\n  const getSortedTasks = (tasks, areaName) => {\n    if (sortConfig.key === null || sortConfig.areaName !== areaName) {\n      return tasks;\n    }\n\n    return [...tasks].sort((a, b) => {\n      let aValue = a[sortConfig.key];\n      let bValue = b[sortConfig.key];\n      \n      // Special handling for specific fields\n      if (sortConfig.key === 'isCompleted') {\n        aValue = a.isCompleted ? 1 : 0;\n        bValue = b.isCompleted ? 1 : 0;\n      } else if (sortConfig.key === 'time_spent') {\n        aValue = a.time_spent || 0;\n        bValue = b.time_spent || 0;\n      } else if (sortConfig.key === 'difficulty') {\n        aValue = difficultyMapping[a.difficulty] || 0;\n        bValue = difficultyMapping[b.difficulty] || 0;\n    }\n      \n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n  };\n\n\n  const allTasks = areas.flatMap((area) => area.tasks);\n  \n  return (\n    <Box>\n      <Grid container spacing={3} direction=\"column\">\n        {areas.map((area) => {\n          const progress = area.total > 0 ? (area.completed / area.total) * 100 : 0;\n          const sortedTasks = getSortedTasks(area.tasks, area.name);\n\n          return (\n            <Grid item xs={12} key={area.name}>\n              <Box\n                  sx={{\n                    border: '1px solid #ddd',\n                    borderRadius: '8px',\n                    backgroundColor: area.name === 'All Tasks' ? '#F0E3FD' : '#E3F2FD',\n                    boxShadow: '0px 4px 6px rgba(0, 0, 0, 0.1)',\n                    overflow: 'hidden',\n                  }}\n              >\n                {/* Main area display */}\n                <Box\n                  sx={{\n                    p: 3,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'flex-start',\n                    justifyContent: 'center',\n                    position: 'relative',\n                  }}\n                >\n                  <Typography\n                  variant=\"h5\"\n                  sx={{color: area.name === 'All Tasks' ? '#6A15C0' : '#1565C0',\n                  mb: 1,}}\n                  >\n                    {area.name}\n                  </Typography>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={progress}\n                    sx={{\n                      width: '100%',\n                      height: '10px',\n                      borderRadius: '5px',\n                      backgroundColor: area.name === 'All Tasks' ? '#DABBFB' : '#BBDEFB',\n                      '& .MuiLinearProgress-bar': {\n                        backgroundColor: area.name === 'All Tasks' ? '#8921F2' : '#2196F3',\n                      },\n                    }}\n                  />\n                  <Typography\n                  variant=\"body1\" sx={{\n                    color: area.name === 'All Tasks' ? '#6A15C0' : '#1565C0',\n                    mt: 1,\n                    }}\n                  >\n                    {area.completed} / {area.total} tasks completed\n                  </Typography>\n                  {/* Dropdown button */}\n                  <IconButton \n                    size=\"small\" \n                    sx={{ position: 'absolute', top: 8, right: 8 }}\n                    onClick={() => toggleAreaExpansion(area.name)}\n                  >\n                    {expandedAreas[area.name] ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                  </IconButton>\n                </Box>\n\n                {/* Dropdown content */}\n                <Collapse in={expandedAreas[area.name]}>\n                  <TableContainer component={Paper}>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'id' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'id' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('id', area.name)}\n                            >\n                              <span style={{ marginRight: '24px' }}></span>\n                              Task ID\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"left\" sx={{ fontWeight: 'bold' }}> {/* Left-align Task column */}\n                            <TableSortLabel\n                              active={sortConfig.key === 'name' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'name' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('name', area.name)}\n                            >\n                              Task\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'isCompleted' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'isCompleted' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('isCompleted', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Status\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'difficulty' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'difficulty' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('difficulty', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Difficulty\n                            </TableSortLabel>\n                          </TableCell>\n                          <TableCell align=\"center\" sx={{ fontWeight: 'bold' }}>\n                            <TableSortLabel\n                              active={sortConfig.key === 'time_spent' && sortConfig.areaName === area.name}\n                              direction={sortConfig.key === 'time_spent' ? sortConfig.direction : 'asc'}\n                              onClick={() => requestSort('time_spent', area.name)}\n                            >\n                               <span style={{ marginRight: '24px' }}></span>\n                              Time Spent\n                            </TableSortLabel>\n                          </TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {sortedTasks.map((task) => (\n                          <TableRow key={task.id}>\n                            <TableCell align=\"center\">{task.id}</TableCell>\n                            <TableCell align=\"left\">{task.name}</TableCell> {/* Left-align Task column */}\n                            <TableCell align=\"center\">\n                              {task.isCompleted ? (\n                                <CheckIcon sx={{ color: 'green' }} />\n                              ) : (\n                                <CloseIcon sx={{ color: 'red' }} />\n                              )}\n                            </TableCell>\n                            <TableCell align=\"center\">{task.isCompleted ? (task.difficulty || 'N/A') : '-'}</TableCell>\n                            <TableCell align=\"center\">{formatTimeSpent(task.time_spent)}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Collapse>\n              </Box>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default TaskCompletion;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}